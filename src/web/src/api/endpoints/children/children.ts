/**
 * Generated by orval v6.30.2 🍺
 * Do not edit manually.
 * KDVManager CRM API
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { useCallback } from "react";
import type { ChildListVM } from "../../models/childListVM";
import type { CreateChildCommand } from "../../models/createChildCommand";
import type { GetAllChildrenParams } from "../../models/getAllChildrenParams";
import { useExecuteFetchPaginated } from "../../mutator/useExecuteFetchPaginated";
import { useExecuteFetch } from "../../mutator/useExecuteFetch";

export const useGetAllChildrenHook = () => {
  const getAllChildren = useExecuteFetchPaginated<ChildListVM[]>();

  return useCallback(
    (params?: GetAllChildrenParams, signal?: AbortSignal) => {
      return getAllChildren({ url: `/crm/v1/children`, method: "GET", params, signal });
    },
    [getAllChildren],
  );
};

export const getGetAllChildrenQueryKey = (params?: GetAllChildrenParams) => {
  return [`/crm/v1/children`, ...(params ? [params] : [])] as const;
};

export const useGetAllChildrenQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetAllChildrenHook>>>,
  TError = unknown,
>(
  params?: GetAllChildrenParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetAllChildrenHook>>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllChildrenQueryKey(params);

  const getAllChildren = useGetAllChildrenHook();

  const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetAllChildrenHook>>>> = ({
    signal,
  }) => getAllChildren(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetAllChildrenHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAllChildrenQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useGetAllChildrenHook>>>
>;
export type GetAllChildrenQueryError = unknown;

export const useGetAllChildren = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetAllChildrenHook>>>,
  TError = unknown,
>(
  params?: GetAllChildrenParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetAllChildrenHook>>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useGetAllChildrenQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const useCreateChildHook = () => {
  const createChild = useExecuteFetch<string>();

  return useCallback(
    (createChildCommand: CreateChildCommand) => {
      return createChild({
        url: `/crm/v1/children`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: createChildCommand,
      });
    },
    [createChild],
  );
};

export const useCreateChildMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useCreateChildHook>>>,
    TError,
    { data: CreateChildCommand },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useCreateChildHook>>>,
  TError,
  { data: CreateChildCommand },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const createChild = useCreateChildHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useCreateChildHook>>>,
    { data: CreateChildCommand }
  > = (props) => {
    const { data } = props ?? {};

    return createChild(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateChildMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useCreateChildHook>>>
>;
export type CreateChildMutationBody = CreateChildCommand;
export type CreateChildMutationError = unknown;

export const useCreateChild = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useCreateChildHook>>>,
    TError,
    { data: CreateChildCommand },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<ReturnType<typeof useCreateChildHook>>>,
  TError,
  { data: CreateChildCommand },
  TContext
> => {
  const mutationOptions = useCreateChildMutationOptions(options);

  return useMutation(mutationOptions);
};
export const useDeleteChildHook = () => {
  const deleteChild = useExecuteFetch<string>();

  return useCallback(
    (id: string) => {
      return deleteChild({ url: `/crm/v1/children/${id}`, method: "DELETE" });
    },
    [deleteChild],
  );
};

export const useDeleteChildMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useDeleteChildHook>>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useDeleteChildHook>>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const deleteChild = useDeleteChildHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useDeleteChildHook>>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteChild(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteChildMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useDeleteChildHook>>>
>;

export type DeleteChildMutationError = unknown;

export const useDeleteChild = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useDeleteChildHook>>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<ReturnType<typeof useDeleteChildHook>>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = useDeleteChildMutationOptions(options);

  return useMutation(mutationOptions);
};
