/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * KDVManager CRM API
 * OpenAPI spec version: v1
 */
import { useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { DailyOverviewVM } from "../../models/dailyOverviewVM";

import type { GetDailyOverviewParams } from "../../models/getDailyOverviewParams";

import { executeFetch } from "../../mutator/executeFetch";

export const getDailyOverview = (params?: GetDailyOverviewParams, signal?: AbortSignal) => {
  return executeFetch<DailyOverviewVM>({
    url: `/scheduling/v1/overview/daily`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetDailyOverviewQueryKey = (params?: GetDailyOverviewParams) => {
  return [`/scheduling/v1/overview/daily`, ...(params ? [params] : [])] as const;
};

export const getGetDailyOverviewQueryOptions = <
  TData = Awaited<ReturnType<typeof getDailyOverview>>,
  TError = unknown,
>(
  params?: GetDailyOverviewParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDailyOverview>>, TError, TData>>;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetDailyOverviewQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDailyOverview>>> = ({ signal }) =>
    getDailyOverview(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDailyOverview>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDailyOverviewQueryResult = NonNullable<Awaited<ReturnType<typeof getDailyOverview>>>;
export type GetDailyOverviewQueryError = unknown;

export function useGetDailyOverview<
  TData = Awaited<ReturnType<typeof getDailyOverview>>,
  TError = unknown,
>(
  params: undefined | GetDailyOverviewParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDailyOverview>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDailyOverview>>,
          TError,
          Awaited<ReturnType<typeof getDailyOverview>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDailyOverview<
  TData = Awaited<ReturnType<typeof getDailyOverview>>,
  TError = unknown,
>(
  params?: GetDailyOverviewParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDailyOverview>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDailyOverview>>,
          TError,
          Awaited<ReturnType<typeof getDailyOverview>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDailyOverview<
  TData = Awaited<ReturnType<typeof getDailyOverview>>,
  TError = unknown,
>(
  params?: GetDailyOverviewParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDailyOverview>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetDailyOverview<
  TData = Awaited<ReturnType<typeof getDailyOverview>>,
  TError = unknown,
>(
  params?: GetDailyOverviewParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDailyOverview>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetDailyOverviewQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
