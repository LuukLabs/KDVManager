/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * KDVManager CRM API
 * OpenAPI spec version: v1
 */
import { useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { AttendanceListVM } from "../../models/attendanceListVM";

import type { GetAttendanceListParams } from "../../models/getAttendanceListParams";

import type { GetGroupsWithSchedulingParams } from "../../models/getGroupsWithSchedulingParams";

import type { GroupWithSchedulingVM } from "../../models/groupWithSchedulingVM";

import { executeFetch } from "../../mutator/executeFetch";

export const getAttendanceList = (params?: GetAttendanceListParams, signal?: AbortSignal) => {
  return executeFetch<AttendanceListVM>({
    url: `/scheduling/v1/attendance/list`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetAttendanceListQueryKey = (params?: GetAttendanceListParams) => {
  return [`/scheduling/v1/attendance/list`, ...(params ? [params] : [])] as const;
};

export const getGetAttendanceListQueryOptions = <
  TData = Awaited<ReturnType<typeof getAttendanceList>>,
  TError = unknown,
>(
  params?: GetAttendanceListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAttendanceList>>, TError, TData>>;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAttendanceListQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAttendanceList>>> = ({ signal }) =>
    getAttendanceList(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAttendanceList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAttendanceListQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAttendanceList>>
>;
export type GetAttendanceListQueryError = unknown;

export function useGetAttendanceList<
  TData = Awaited<ReturnType<typeof getAttendanceList>>,
  TError = unknown,
>(
  params: undefined | GetAttendanceListParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAttendanceList>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAttendanceList>>,
          TError,
          Awaited<ReturnType<typeof getAttendanceList>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAttendanceList<
  TData = Awaited<ReturnType<typeof getAttendanceList>>,
  TError = unknown,
>(
  params?: GetAttendanceListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAttendanceList>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAttendanceList>>,
          TError,
          Awaited<ReturnType<typeof getAttendanceList>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAttendanceList<
  TData = Awaited<ReturnType<typeof getAttendanceList>>,
  TError = unknown,
>(
  params?: GetAttendanceListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAttendanceList>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetAttendanceList<
  TData = Awaited<ReturnType<typeof getAttendanceList>>,
  TError = unknown,
>(
  params?: GetAttendanceListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAttendanceList>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetAttendanceListQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGroupsWithScheduling = (
  params?: GetGroupsWithSchedulingParams,
  signal?: AbortSignal,
) => {
  return executeFetch<GroupWithSchedulingVM[]>({
    url: `/scheduling/v1/attendance/groups`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetGroupsWithSchedulingQueryKey = (params?: GetGroupsWithSchedulingParams) => {
  return [`/scheduling/v1/attendance/groups`, ...(params ? [params] : [])] as const;
};

export const getGetGroupsWithSchedulingQueryOptions = <
  TData = Awaited<ReturnType<typeof getGroupsWithScheduling>>,
  TError = unknown,
>(
  params?: GetGroupsWithSchedulingParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getGroupsWithScheduling>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetGroupsWithSchedulingQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getGroupsWithScheduling>>> = ({
    signal,
  }) => getGroupsWithScheduling(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getGroupsWithScheduling>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetGroupsWithSchedulingQueryResult = NonNullable<
  Awaited<ReturnType<typeof getGroupsWithScheduling>>
>;
export type GetGroupsWithSchedulingQueryError = unknown;

export function useGetGroupsWithScheduling<
  TData = Awaited<ReturnType<typeof getGroupsWithScheduling>>,
  TError = unknown,
>(
  params: undefined | GetGroupsWithSchedulingParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getGroupsWithScheduling>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGroupsWithScheduling>>,
          TError,
          Awaited<ReturnType<typeof getGroupsWithScheduling>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetGroupsWithScheduling<
  TData = Awaited<ReturnType<typeof getGroupsWithScheduling>>,
  TError = unknown,
>(
  params?: GetGroupsWithSchedulingParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getGroupsWithScheduling>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGroupsWithScheduling>>,
          TError,
          Awaited<ReturnType<typeof getGroupsWithScheduling>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetGroupsWithScheduling<
  TData = Awaited<ReturnType<typeof getGroupsWithScheduling>>,
  TError = unknown,
>(
  params?: GetGroupsWithSchedulingParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getGroupsWithScheduling>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetGroupsWithScheduling<
  TData = Awaited<ReturnType<typeof getGroupsWithScheduling>>,
  TError = unknown,
>(
  params?: GetGroupsWithSchedulingParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getGroupsWithScheduling>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetGroupsWithSchedulingQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
