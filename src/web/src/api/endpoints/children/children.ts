/**
 * Generated by orval v6.5.1 üç∫
 * Do not edit manually.
 * KDVManager.Services.ChildManagement.Api
 * OpenAPI spec version: 1.0
 */
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from "react-query";
import type {
  ChildListVM,
  GetAllChildrenParams,
  CreateChildCommand,
} from "../../models";
import { executeAxiosPaginated } from "../../mutator/executeAxiosPaginated";
import { executeAxios } from "../../mutator/executeAxios";

type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (
  ...args: any
) => Promise<infer R>
  ? R
  : any;

export const getAllChildren = (params?: GetAllChildrenParams) => {
  return executeAxiosPaginated<ChildListVM[]>({
    url: `/v1/children`,
    method: "get",
    params,
  });
};

export const getGetAllChildrenQueryKey = (params?: GetAllChildrenParams) => [
  `/v1/children`,
  ...(params ? [params] : []),
];

export const useGetAllChildren = <
  TData = AsyncReturnType<typeof getAllChildren>,
  TError = unknown
>(
  params?: GetAllChildrenParams,
  options?: {
    query?: UseQueryOptions<
      AsyncReturnType<typeof getAllChildren>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetAllChildrenQueryKey(params);

  const queryFn: QueryFunction<AsyncReturnType<typeof getAllChildren>> = () =>
    getAllChildren(params);

  const query = useQuery<AsyncReturnType<typeof getAllChildren>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const createChild = (createChildCommand: CreateChildCommand) => {
  return executeAxios<string>({
    url: `/v1/children`,
    method: "post",
    data: createChildCommand,
  });
};

export const useCreateChild = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<typeof createChild>,
    TError,
    { data: CreateChildCommand },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options || {};

  const mutationFn: MutationFunction<
    AsyncReturnType<typeof createChild>,
    { data: CreateChildCommand }
  > = (props) => {
    const { data } = props || {};

    return createChild(data);
  };

  return useMutation<
    AsyncReturnType<typeof createChild>,
    TError,
    { data: CreateChildCommand },
    TContext
  >(mutationFn, mutationOptions);
};
export const deleteChild = (id: string) => {
  return executeAxios<string>({ url: `/v1/children/${id}`, method: "delete" });
};

export const useDeleteChild = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<typeof deleteChild>,
    TError,
    { id: string },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options || {};

  const mutationFn: MutationFunction<
    AsyncReturnType<typeof deleteChild>,
    { id: string }
  > = (props) => {
    const { id } = props || {};

    return deleteChild(id);
  };

  return useMutation<
    AsyncReturnType<typeof deleteChild>,
    TError,
    { id: string },
    TContext
  >(mutationFn, mutationOptions);
};
