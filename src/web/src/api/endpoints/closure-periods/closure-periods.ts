/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * KDVManager CRM API
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { AddClosurePeriodCommand } from "../../models/addClosurePeriodCommand";

import type { ClosurePeriod } from "../../models/closurePeriod";

import { executeFetch } from "../../mutator/executeFetch";

export const listClosurePeriods = (signal?: AbortSignal) => {
  return executeFetch<ClosurePeriod[]>({
    url: `/scheduling/v1/closure-periods`,
    method: "GET",
    signal,
  });
};

export const getListClosurePeriodsQueryKey = () => {
  return [`/scheduling/v1/closure-periods`] as const;
};

export const getListClosurePeriodsQueryOptions = <
  TData = Awaited<ReturnType<typeof listClosurePeriods>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listClosurePeriods>>, TError, TData>>;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListClosurePeriodsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listClosurePeriods>>> = ({ signal }) =>
    listClosurePeriods(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listClosurePeriods>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListClosurePeriodsQueryResult = NonNullable<
  Awaited<ReturnType<typeof listClosurePeriods>>
>;
export type ListClosurePeriodsQueryError = unknown;

export function useListClosurePeriods<
  TData = Awaited<ReturnType<typeof listClosurePeriods>>,
  TError = unknown,
>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof listClosurePeriods>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listClosurePeriods>>,
          TError,
          Awaited<ReturnType<typeof listClosurePeriods>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useListClosurePeriods<
  TData = Awaited<ReturnType<typeof listClosurePeriods>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listClosurePeriods>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listClosurePeriods>>,
          TError,
          Awaited<ReturnType<typeof listClosurePeriods>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useListClosurePeriods<
  TData = Awaited<ReturnType<typeof listClosurePeriods>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listClosurePeriods>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useListClosurePeriods<
  TData = Awaited<ReturnType<typeof listClosurePeriods>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listClosurePeriods>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getListClosurePeriodsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const addClosurePeriod = (
  addClosurePeriodCommand: AddClosurePeriodCommand,
  signal?: AbortSignal,
) => {
  return executeFetch<string>({
    url: `/scheduling/v1/closure-periods`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: addClosurePeriodCommand,
    signal,
  });
};

export const getAddClosurePeriodMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addClosurePeriod>>,
    TError,
    { data: AddClosurePeriodCommand },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addClosurePeriod>>,
  TError,
  { data: AddClosurePeriodCommand },
  TContext
> => {
  const mutationKey = ["addClosurePeriod"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addClosurePeriod>>,
    { data: AddClosurePeriodCommand }
  > = (props) => {
    const { data } = props ?? {};

    return addClosurePeriod(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddClosurePeriodMutationResult = NonNullable<
  Awaited<ReturnType<typeof addClosurePeriod>>
>;
export type AddClosurePeriodMutationBody = AddClosurePeriodCommand;
export type AddClosurePeriodMutationError = unknown;

export const useAddClosurePeriod = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof addClosurePeriod>>,
      TError,
      { data: AddClosurePeriodCommand },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof addClosurePeriod>>,
  TError,
  { data: AddClosurePeriodCommand },
  TContext
> => {
  const mutationOptions = getAddClosurePeriodMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const deleteClosurePeriod = (id: string) => {
  return executeFetch<void>({ url: `/scheduling/v1/closure-periods/${id}`, method: "DELETE" });
};

export const getDeleteClosurePeriodMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteClosurePeriod>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteClosurePeriod>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["deleteClosurePeriod"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteClosurePeriod>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteClosurePeriod(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteClosurePeriodMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteClosurePeriod>>
>;

export type DeleteClosurePeriodMutationError = unknown;

export const useDeleteClosurePeriod = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteClosurePeriod>>,
      TError,
      { id: string },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteClosurePeriod>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteClosurePeriodMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
