/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * KDVManager CRM API
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { AbsenceListByChildIdVM } from "../../models/absenceListByChildIdVM";

import type { AddAbsenceCommand } from "../../models/addAbsenceCommand";

import type { ProblemDetails } from "../../models/problemDetails";

import type { UnprocessableEntityResponse1 } from "../../models/unprocessableEntityResponse1";

import { executeFetch } from "../../mutator/executeFetch";

export const getAbsencesByChildId = (childId: string, signal?: AbortSignal) => {
  return executeFetch<AbsenceListByChildIdVM[]>({
    url: `/scheduling/v1/children/${childId}/absences`,
    method: "GET",
    signal,
  });
};

export const getGetAbsencesByChildIdQueryKey = (childId: string) => {
  return [`/scheduling/v1/children/${childId}/absences`] as const;
};

export const getGetAbsencesByChildIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getAbsencesByChildId>>,
  TError = unknown,
>(
  childId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAbsencesByChildId>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAbsencesByChildIdQueryKey(childId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAbsencesByChildId>>> = ({ signal }) =>
    getAbsencesByChildId(childId, signal);

  return { queryKey, queryFn, enabled: !!childId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAbsencesByChildId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAbsencesByChildIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAbsencesByChildId>>
>;
export type GetAbsencesByChildIdQueryError = unknown;

export function useGetAbsencesByChildId<
  TData = Awaited<ReturnType<typeof getAbsencesByChildId>>,
  TError = unknown,
>(
  childId: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAbsencesByChildId>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAbsencesByChildId>>,
          TError,
          Awaited<ReturnType<typeof getAbsencesByChildId>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAbsencesByChildId<
  TData = Awaited<ReturnType<typeof getAbsencesByChildId>>,
  TError = unknown,
>(
  childId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAbsencesByChildId>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAbsencesByChildId>>,
          TError,
          Awaited<ReturnType<typeof getAbsencesByChildId>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAbsencesByChildId<
  TData = Awaited<ReturnType<typeof getAbsencesByChildId>>,
  TError = unknown,
>(
  childId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAbsencesByChildId>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetAbsencesByChildId<
  TData = Awaited<ReturnType<typeof getAbsencesByChildId>>,
  TError = unknown,
>(
  childId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAbsencesByChildId>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetAbsencesByChildIdQueryOptions(childId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const addAbsence = (
  childId: string,
  addAbsenceCommand: AddAbsenceCommand,
  signal?: AbortSignal,
) => {
  return executeFetch<string>({
    url: `/scheduling/v1/children/${childId}/absences`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: addAbsenceCommand,
    signal,
  });
};

export const getAddAbsenceMutationOptions = <
  TError = UnprocessableEntityResponse1,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addAbsence>>,
    TError,
    { childId: string; data: AddAbsenceCommand },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addAbsence>>,
  TError,
  { childId: string; data: AddAbsenceCommand },
  TContext
> => {
  const mutationKey = ["addAbsence"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addAbsence>>,
    { childId: string; data: AddAbsenceCommand }
  > = (props) => {
    const { childId, data } = props ?? {};

    return addAbsence(childId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddAbsenceMutationResult = NonNullable<Awaited<ReturnType<typeof addAbsence>>>;
export type AddAbsenceMutationBody = AddAbsenceCommand;
export type AddAbsenceMutationError = UnprocessableEntityResponse1;

export const useAddAbsence = <TError = UnprocessableEntityResponse1, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof addAbsence>>,
      TError,
      { childId: string; data: AddAbsenceCommand },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof addAbsence>>,
  TError,
  { childId: string; data: AddAbsenceCommand },
  TContext
> => {
  const mutationOptions = getAddAbsenceMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const deleteAbsence = (id: string) => {
  return executeFetch<void>({ url: `/scheduling/v1/absences/${id}`, method: "DELETE" });
};

export const getDeleteAbsenceMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteAbsence>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteAbsence>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["deleteAbsence"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAbsence>>, { id: string }> = (
    props,
  ) => {
    const { id } = props ?? {};

    return deleteAbsence(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteAbsenceMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAbsence>>>;

export type DeleteAbsenceMutationError = ProblemDetails;

export const useDeleteAbsence = <TError = ProblemDetails, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteAbsence>>,
      TError,
      { id: string },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteAbsence>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteAbsenceMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
