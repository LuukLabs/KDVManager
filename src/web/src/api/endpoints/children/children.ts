/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * KDVManager CRM API
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { ChildDetailVM } from "../../models/childDetailVM";

import type { ChildListVM } from "../../models/childListVM";

import type { CreateChildCommand } from "../../models/createChildCommand";

import type { GetAllChildrenParams } from "../../models/getAllChildrenParams";

import type { UnprocessableEntityResponse } from "../../models/unprocessableEntityResponse";

import type { UpdateChildCommand } from "../../models/updateChildCommand";

import { executeFetchPaginated } from "../../mutator/executeFetchPaginated";
import { executeFetch } from "../../mutator/executeFetch";

export const getAllChildren = (params?: GetAllChildrenParams, signal?: AbortSignal) => {
  return executeFetchPaginated<ChildListVM[]>({
    url: `/crm/v1/children`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetAllChildrenQueryKey = (params?: GetAllChildrenParams) => {
  return [`/crm/v1/children`, ...(params ? [params] : [])] as const;
};

export const getGetAllChildrenQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllChildren>>,
  TError = unknown,
>(
  params?: GetAllChildrenParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllChildren>>, TError, TData>>;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllChildrenQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllChildren>>> = ({ signal }) =>
    getAllChildren(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllChildren>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAllChildrenQueryResult = NonNullable<Awaited<ReturnType<typeof getAllChildren>>>;
export type GetAllChildrenQueryError = unknown;

export function useGetAllChildren<
  TData = Awaited<ReturnType<typeof getAllChildren>>,
  TError = unknown,
>(
  params: undefined | GetAllChildrenParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllChildren>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllChildren>>,
          TError,
          Awaited<ReturnType<typeof getAllChildren>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAllChildren<
  TData = Awaited<ReturnType<typeof getAllChildren>>,
  TError = unknown,
>(
  params?: GetAllChildrenParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllChildren>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllChildren>>,
          TError,
          Awaited<ReturnType<typeof getAllChildren>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAllChildren<
  TData = Awaited<ReturnType<typeof getAllChildren>>,
  TError = unknown,
>(
  params?: GetAllChildrenParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllChildren>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetAllChildren<
  TData = Awaited<ReturnType<typeof getAllChildren>>,
  TError = unknown,
>(
  params?: GetAllChildrenParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllChildren>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetAllChildrenQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const createChild = (createChildCommand: CreateChildCommand, signal?: AbortSignal) => {
  return executeFetch<string>({
    url: `/crm/v1/children`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createChildCommand,
    signal,
  });
};

export const getCreateChildMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createChild>>,
    TError,
    { data: CreateChildCommand },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createChild>>,
  TError,
  { data: CreateChildCommand },
  TContext
> => {
  const mutationKey = ["createChild"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createChild>>,
    { data: CreateChildCommand }
  > = (props) => {
    const { data } = props ?? {};

    return createChild(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateChildMutationResult = NonNullable<Awaited<ReturnType<typeof createChild>>>;
export type CreateChildMutationBody = CreateChildCommand;
export type CreateChildMutationError = unknown;

export const useCreateChild = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createChild>>,
      TError,
      { data: CreateChildCommand },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createChild>>,
  TError,
  { data: CreateChildCommand },
  TContext
> => {
  const mutationOptions = getCreateChildMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getChildById = (id: string, signal?: AbortSignal) => {
  return executeFetch<ChildDetailVM>({ url: `/crm/v1/children/${id}`, method: "GET", signal });
};

export const getGetChildByIdQueryKey = (id: string) => {
  return [`/crm/v1/children/${id}`] as const;
};

export const getGetChildByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getChildById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getChildById>>, TError, TData>>;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetChildByIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getChildById>>> = ({ signal }) =>
    getChildById(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getChildById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetChildByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getChildById>>>;
export type GetChildByIdQueryError = unknown;

export function useGetChildById<TData = Awaited<ReturnType<typeof getChildById>>, TError = unknown>(
  id: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getChildById>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getChildById>>,
          TError,
          Awaited<ReturnType<typeof getChildById>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetChildById<TData = Awaited<ReturnType<typeof getChildById>>, TError = unknown>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getChildById>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getChildById>>,
          TError,
          Awaited<ReturnType<typeof getChildById>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetChildById<TData = Awaited<ReturnType<typeof getChildById>>, TError = unknown>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getChildById>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetChildById<TData = Awaited<ReturnType<typeof getChildById>>, TError = unknown>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getChildById>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetChildByIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const updateChild = (id: string, updateChildCommand: UpdateChildCommand) => {
  return executeFetch<void>({
    url: `/crm/v1/children/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: updateChildCommand,
  });
};

export const getUpdateChildMutationOptions = <
  TError = UnprocessableEntityResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateChild>>,
    TError,
    { id: string; data: UpdateChildCommand },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateChild>>,
  TError,
  { id: string; data: UpdateChildCommand },
  TContext
> => {
  const mutationKey = ["updateChild"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateChild>>,
    { id: string; data: UpdateChildCommand }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateChild(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateChildMutationResult = NonNullable<Awaited<ReturnType<typeof updateChild>>>;
export type UpdateChildMutationBody = UpdateChildCommand;
export type UpdateChildMutationError = UnprocessableEntityResponse;

export const useUpdateChild = <TError = UnprocessableEntityResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateChild>>,
      TError,
      { id: string; data: UpdateChildCommand },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateChild>>,
  TError,
  { id: string; data: UpdateChildCommand },
  TContext
> => {
  const mutationOptions = getUpdateChildMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const deleteChild = (id: string) => {
  return executeFetch<void>({ url: `/crm/v1/children/${id}`, method: "DELETE" });
};

export const getDeleteChildMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteChild>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteChild>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["deleteChild"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteChild>>, { id: string }> = (
    props,
  ) => {
    const { id } = props ?? {};

    return deleteChild(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteChildMutationResult = NonNullable<Awaited<ReturnType<typeof deleteChild>>>;

export type DeleteChildMutationError = unknown;

export const useDeleteChild = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteChild>>,
      TError,
      { id: string },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof deleteChild>>, TError, { id: string }, TContext> => {
  const mutationOptions = getDeleteChildMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
