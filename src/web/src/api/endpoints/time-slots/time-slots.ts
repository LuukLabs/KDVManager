/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * KDVManager CRM API
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { AddTimeSlotCommand } from "../../models/addTimeSlotCommand";

import type { ListTimeSlotsParams } from "../../models/listTimeSlotsParams";

import type { ProblemDetails } from "../../models/problemDetails";

import type { TimeSlotListVM } from "../../models/timeSlotListVM";

import type { UnprocessableEntityResponse1 } from "../../models/unprocessableEntityResponse1";

import type { UpdateTimeSlotCommand } from "../../models/updateTimeSlotCommand";

import { executeFetchPaginated } from "../../mutator/executeFetchPaginated";
import { executeFetch } from "../../mutator/executeFetch";

export const listTimeSlots = (params?: ListTimeSlotsParams, signal?: AbortSignal) => {
  return executeFetchPaginated<TimeSlotListVM[]>({
    url: `/scheduling/v1/timeslots`,
    method: "GET",
    params,
    signal,
  });
};

export const getListTimeSlotsQueryKey = (params?: ListTimeSlotsParams) => {
  return [`/scheduling/v1/timeslots`, ...(params ? [params] : [])] as const;
};

export const getListTimeSlotsQueryOptions = <
  TData = Awaited<ReturnType<typeof listTimeSlots>>,
  TError = unknown,
>(
  params?: ListTimeSlotsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listTimeSlots>>, TError, TData>>;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListTimeSlotsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listTimeSlots>>> = ({ signal }) =>
    listTimeSlots(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listTimeSlots>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListTimeSlotsQueryResult = NonNullable<Awaited<ReturnType<typeof listTimeSlots>>>;
export type ListTimeSlotsQueryError = unknown;

export function useListTimeSlots<
  TData = Awaited<ReturnType<typeof listTimeSlots>>,
  TError = unknown,
>(
  params: undefined | ListTimeSlotsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof listTimeSlots>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listTimeSlots>>,
          TError,
          Awaited<ReturnType<typeof listTimeSlots>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useListTimeSlots<
  TData = Awaited<ReturnType<typeof listTimeSlots>>,
  TError = unknown,
>(
  params?: ListTimeSlotsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listTimeSlots>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listTimeSlots>>,
          TError,
          Awaited<ReturnType<typeof listTimeSlots>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useListTimeSlots<
  TData = Awaited<ReturnType<typeof listTimeSlots>>,
  TError = unknown,
>(
  params?: ListTimeSlotsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listTimeSlots>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useListTimeSlots<
  TData = Awaited<ReturnType<typeof listTimeSlots>>,
  TError = unknown,
>(
  params?: ListTimeSlotsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listTimeSlots>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getListTimeSlotsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const addTimeSlot = (addTimeSlotCommand: AddTimeSlotCommand, signal?: AbortSignal) => {
  return executeFetch<string>({
    url: `/scheduling/v1/timeslots`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: addTimeSlotCommand,
    signal,
  });
};

export const getAddTimeSlotMutationOptions = <
  TError = UnprocessableEntityResponse1,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addTimeSlot>>,
    TError,
    { data: AddTimeSlotCommand },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addTimeSlot>>,
  TError,
  { data: AddTimeSlotCommand },
  TContext
> => {
  const mutationKey = ["addTimeSlot"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addTimeSlot>>,
    { data: AddTimeSlotCommand }
  > = (props) => {
    const { data } = props ?? {};

    return addTimeSlot(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddTimeSlotMutationResult = NonNullable<Awaited<ReturnType<typeof addTimeSlot>>>;
export type AddTimeSlotMutationBody = AddTimeSlotCommand;
export type AddTimeSlotMutationError = UnprocessableEntityResponse1;

export const useAddTimeSlot = <TError = UnprocessableEntityResponse1, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof addTimeSlot>>,
      TError,
      { data: AddTimeSlotCommand },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof addTimeSlot>>,
  TError,
  { data: AddTimeSlotCommand },
  TContext
> => {
  const mutationOptions = getAddTimeSlotMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const updateTimeSlot = (id: string, updateTimeSlotCommand: UpdateTimeSlotCommand) => {
  return executeFetch<void>({
    url: `/scheduling/v1/timeslots/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: updateTimeSlotCommand,
  });
};

export const getUpdateTimeSlotMutationOptions = <
  TError = ProblemDetails | UnprocessableEntityResponse1,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateTimeSlot>>,
    TError,
    { id: string; data: UpdateTimeSlotCommand },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateTimeSlot>>,
  TError,
  { id: string; data: UpdateTimeSlotCommand },
  TContext
> => {
  const mutationKey = ["updateTimeSlot"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateTimeSlot>>,
    { id: string; data: UpdateTimeSlotCommand }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateTimeSlot(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateTimeSlotMutationResult = NonNullable<Awaited<ReturnType<typeof updateTimeSlot>>>;
export type UpdateTimeSlotMutationBody = UpdateTimeSlotCommand;
export type UpdateTimeSlotMutationError = ProblemDetails | UnprocessableEntityResponse1;

export const useUpdateTimeSlot = <
  TError = ProblemDetails | UnprocessableEntityResponse1,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateTimeSlot>>,
      TError,
      { id: string; data: UpdateTimeSlotCommand },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateTimeSlot>>,
  TError,
  { id: string; data: UpdateTimeSlotCommand },
  TContext
> => {
  const mutationOptions = getUpdateTimeSlotMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const deleteTimeSlot = (id: string) => {
  return executeFetch<void>({ url: `/scheduling/v1/timeslots/${id}`, method: "DELETE" });
};

export const getDeleteTimeSlotMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteTimeSlot>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteTimeSlot>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["deleteTimeSlot"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTimeSlot>>, { id: string }> = (
    props,
  ) => {
    const { id } = props ?? {};

    return deleteTimeSlot(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteTimeSlotMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTimeSlot>>>;

export type DeleteTimeSlotMutationError = ProblemDetails;

export const useDeleteTimeSlot = <TError = ProblemDetails, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteTimeSlot>>,
      TError,
      { id: string },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteTimeSlot>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteTimeSlotMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
