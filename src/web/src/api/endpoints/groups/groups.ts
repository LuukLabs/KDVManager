/**
 * Generated by orval v6.25.0 🍺
 * Do not edit manually.
 * KDVManager CRM API
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type { AddGroupCommand, GroupListVM, ListGroupsParams } from "../../models";
import { useExecuteFetchPaginated } from "../../mutator/useExecuteFetchPaginated";
import { useExecuteFetch } from "../../mutator/useExecuteFetch";

const useListGroupsHook = () => {
  const listGroups = useExecuteFetchPaginated<GroupListVM[]>();

  return (params?: ListGroupsParams) => {
    return listGroups({ url: `/scheduling/v1/groups`, method: "GET", params });
  };
};

export const getListGroupsQueryKey = (params?: ListGroupsParams) => {
  return [`/scheduling/v1/groups`, ...(params ? [params] : [])] as const;
};

export const useListGroupsQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useListGroupsHook>>>,
  TError = unknown
>(
  params?: ListGroupsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useListGroupsHook>>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListGroupsQueryKey(params);

  const listGroups = useListGroupsHook();

  const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useListGroupsHook>>>> = () =>
    listGroups(params);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useListGroupsHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ListGroupsQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useListGroupsHook>>>
>;
export type ListGroupsQueryError = unknown;

export const useListGroups = <
  TData = Awaited<ReturnType<ReturnType<typeof useListGroupsHook>>>,
  TError = unknown
>(
  params?: ListGroupsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useListGroupsHook>>>, TError, TData>
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useListGroupsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const useAddGroupHook = () => {
  const addGroup = useExecuteFetch<string>();

  return (addGroupCommand: AddGroupCommand) => {
    return addGroup({
      url: `/scheduling/v1/groups`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: addGroupCommand,
    });
  };
};

export const useAddGroupMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useAddGroupHook>>>,
    TError,
    { data: AddGroupCommand },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useAddGroupHook>>>,
  TError,
  { data: AddGroupCommand },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const addGroup = useAddGroupHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useAddGroupHook>>>,
    { data: AddGroupCommand }
  > = (props) => {
    const { data } = props ?? {};

    return addGroup(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddGroupMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useAddGroupHook>>>
>;
export type AddGroupMutationBody = AddGroupCommand;
export type AddGroupMutationError = unknown;

export const useAddGroup = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useAddGroupHook>>>,
    TError,
    { data: AddGroupCommand },
    TContext
  >;
}) => {
  const mutationOptions = useAddGroupMutationOptions(options);

  return useMutation(mutationOptions);
};
