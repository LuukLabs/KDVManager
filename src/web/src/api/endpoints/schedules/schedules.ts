/**
 * Generated by orval v7.0.1 🍺
 * Do not edit manually.
 * KDVManager CRM API
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { useCallback } from "react";
import type { AddScheduleCommand } from "../../models/addScheduleCommand";
import type { ChildScheduleListVM } from "../../models/childScheduleListVM";
import type { GetChildSchedulesParams } from "../../models/getChildSchedulesParams";
import type { UnprocessableEntityResponse } from "../../models/unprocessableEntityResponse";
import { useExecuteFetch } from "../../mutator/useExecuteFetch";

export const useGetChildSchedulesHook = () => {
  const getChildSchedules = useExecuteFetch<ChildScheduleListVM[]>();

  return useCallback(
    (params?: GetChildSchedulesParams, signal?: AbortSignal) => {
      return getChildSchedules({ url: `/scheduling/v1/schedules`, method: "GET", params, signal });
    },
    [getChildSchedules],
  );
};

export const getGetChildSchedulesQueryKey = (params?: GetChildSchedulesParams) => {
  return [`/scheduling/v1/schedules`, ...(params ? [params] : [])] as const;
};

export const useGetChildSchedulesQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetChildSchedulesHook>>>,
  TError = unknown,
>(
  params?: GetChildSchedulesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetChildSchedulesHook>>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetChildSchedulesQueryKey(params);

  const getChildSchedules = useGetChildSchedulesHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useGetChildSchedulesHook>>>
  > = ({ signal }) => getChildSchedules(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetChildSchedulesHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetChildSchedulesQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useGetChildSchedulesHook>>>
>;
export type GetChildSchedulesQueryError = unknown;

export function useGetChildSchedules<
  TData = Awaited<ReturnType<ReturnType<typeof useGetChildSchedulesHook>>>,
  TError = unknown,
>(
  params: undefined | GetChildSchedulesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetChildSchedulesHook>>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetChildSchedulesHook>>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetChildSchedules<
  TData = Awaited<ReturnType<ReturnType<typeof useGetChildSchedulesHook>>>,
  TError = unknown,
>(
  params?: GetChildSchedulesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetChildSchedulesHook>>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetChildSchedulesHook>>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetChildSchedules<
  TData = Awaited<ReturnType<ReturnType<typeof useGetChildSchedulesHook>>>,
  TError = unknown,
>(
  params?: GetChildSchedulesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetChildSchedulesHook>>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetChildSchedules<
  TData = Awaited<ReturnType<ReturnType<typeof useGetChildSchedulesHook>>>,
  TError = unknown,
>(
  params?: GetChildSchedulesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetChildSchedulesHook>>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = useGetChildSchedulesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const useAddScheduleHook = () => {
  const addSchedule = useExecuteFetch<string>();

  return useCallback(
    (addScheduleCommand: AddScheduleCommand) => {
      return addSchedule({
        url: `/scheduling/v1/schedules`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: addScheduleCommand,
      });
    },
    [addSchedule],
  );
};

export const useAddScheduleMutationOptions = <
  TError = UnprocessableEntityResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useAddScheduleHook>>>,
    TError,
    { data: AddScheduleCommand },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useAddScheduleHook>>>,
  TError,
  { data: AddScheduleCommand },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const addSchedule = useAddScheduleHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useAddScheduleHook>>>,
    { data: AddScheduleCommand }
  > = (props) => {
    const { data } = props ?? {};

    return addSchedule(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddScheduleMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useAddScheduleHook>>>
>;
export type AddScheduleMutationBody = AddScheduleCommand;
export type AddScheduleMutationError = UnprocessableEntityResponse;

export const useAddSchedule = <TError = UnprocessableEntityResponse, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useAddScheduleHook>>>,
    TError,
    { data: AddScheduleCommand },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<ReturnType<typeof useAddScheduleHook>>>,
  TError,
  { data: AddScheduleCommand },
  TContext
> => {
  const mutationOptions = useAddScheduleMutationOptions(options);

  return useMutation(mutationOptions);
};
