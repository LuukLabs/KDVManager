/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * KDVManager CRM API
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { AddGroupCommand } from "../../models/addGroupCommand";

import type { GroupListVM } from "../../models/groupListVM";

import type { ListGroupsParams } from "../../models/listGroupsParams";

import type { ProblemDetails } from "../../models/problemDetails";

import type { UnprocessableEntityResponse1 } from "../../models/unprocessableEntityResponse1";

import { executeFetchPaginated } from "../../mutator/executeFetchPaginated";
import { executeFetch } from "../../mutator/executeFetch";

export const listGroups = (params?: ListGroupsParams, signal?: AbortSignal) => {
  return executeFetchPaginated<GroupListVM[]>({
    url: `/scheduling/v1/groups`,
    method: "GET",
    params,
    signal,
  });
};

export const getListGroupsQueryKey = (params?: ListGroupsParams) => {
  return [`/scheduling/v1/groups`, ...(params ? [params] : [])] as const;
};

export const getListGroupsQueryOptions = <
  TData = Awaited<ReturnType<typeof listGroups>>,
  TError = unknown,
>(
  params?: ListGroupsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listGroups>>, TError, TData>>;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListGroupsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listGroups>>> = ({ signal }) =>
    listGroups(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listGroups>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListGroupsQueryResult = NonNullable<Awaited<ReturnType<typeof listGroups>>>;
export type ListGroupsQueryError = unknown;

export function useListGroups<TData = Awaited<ReturnType<typeof listGroups>>, TError = unknown>(
  params: undefined | ListGroupsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof listGroups>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listGroups>>,
          TError,
          Awaited<ReturnType<typeof listGroups>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useListGroups<TData = Awaited<ReturnType<typeof listGroups>>, TError = unknown>(
  params?: ListGroupsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listGroups>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listGroups>>,
          TError,
          Awaited<ReturnType<typeof listGroups>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useListGroups<TData = Awaited<ReturnType<typeof listGroups>>, TError = unknown>(
  params?: ListGroupsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listGroups>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useListGroups<TData = Awaited<ReturnType<typeof listGroups>>, TError = unknown>(
  params?: ListGroupsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listGroups>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getListGroupsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const addGroup = (addGroupCommand: AddGroupCommand, signal?: AbortSignal) => {
  return executeFetch<string>({
    url: `/scheduling/v1/groups`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: addGroupCommand,
    signal,
  });
};

export const getAddGroupMutationOptions = <
  TError = UnprocessableEntityResponse1,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addGroup>>,
    TError,
    { data: AddGroupCommand },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addGroup>>,
  TError,
  { data: AddGroupCommand },
  TContext
> => {
  const mutationKey = ["addGroup"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addGroup>>,
    { data: AddGroupCommand }
  > = (props) => {
    const { data } = props ?? {};

    return addGroup(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddGroupMutationResult = NonNullable<Awaited<ReturnType<typeof addGroup>>>;
export type AddGroupMutationBody = AddGroupCommand;
export type AddGroupMutationError = UnprocessableEntityResponse1;

export const useAddGroup = <TError = UnprocessableEntityResponse1, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof addGroup>>,
      TError,
      { data: AddGroupCommand },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof addGroup>>,
  TError,
  { data: AddGroupCommand },
  TContext
> => {
  const mutationOptions = getAddGroupMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const deleteGroup = (id: string) => {
  return executeFetch<void>({ url: `/scheduling/v1/groups/${id}`, method: "DELETE" });
};

export const getDeleteGroupMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteGroup>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteGroup>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["deleteGroup"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteGroup>>, { id: string }> = (
    props,
  ) => {
    const { id } = props ?? {};

    return deleteGroup(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteGroupMutationResult = NonNullable<Awaited<ReturnType<typeof deleteGroup>>>;

export type DeleteGroupMutationError = ProblemDetails;

export const useDeleteGroup = <TError = ProblemDetails, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteGroup>>,
      TError,
      { id: string },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof deleteGroup>>, TError, { id: string }, TContext> => {
  const mutationOptions = getDeleteGroupMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
