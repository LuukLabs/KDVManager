/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * KDVManager CRM API
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { AddScheduleCommand } from "../../models/addScheduleCommand";

import type { ChildScheduleListVM } from "../../models/childScheduleListVM";

import type { GetChildSchedulesParams } from "../../models/getChildSchedulesParams";

import type { GetSchedulesByDateParams } from "../../models/getSchedulesByDateParams";

import type { ScheduleByDateVM } from "../../models/scheduleByDateVM";

import type { UnprocessableEntityResponse } from "../../models/unprocessableEntityResponse";

import { executeFetch } from "../../mutator/executeFetch";

export const getChildSchedules = (params?: GetChildSchedulesParams, signal?: AbortSignal) => {
  return executeFetch<ChildScheduleListVM[]>({
    url: `/scheduling/v1/schedules`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetChildSchedulesQueryKey = (params?: GetChildSchedulesParams) => {
  return [`/scheduling/v1/schedules`, ...(params ? [params] : [])] as const;
};

export const getGetChildSchedulesQueryOptions = <
  TData = Awaited<ReturnType<typeof getChildSchedules>>,
  TError = unknown,
>(
  params?: GetChildSchedulesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getChildSchedules>>, TError, TData>>;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetChildSchedulesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getChildSchedules>>> = ({ signal }) =>
    getChildSchedules(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getChildSchedules>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetChildSchedulesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getChildSchedules>>
>;
export type GetChildSchedulesQueryError = unknown;

export function useGetChildSchedules<
  TData = Awaited<ReturnType<typeof getChildSchedules>>,
  TError = unknown,
>(
  params: undefined | GetChildSchedulesParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getChildSchedules>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getChildSchedules>>,
          TError,
          Awaited<ReturnType<typeof getChildSchedules>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetChildSchedules<
  TData = Awaited<ReturnType<typeof getChildSchedules>>,
  TError = unknown,
>(
  params?: GetChildSchedulesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getChildSchedules>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getChildSchedules>>,
          TError,
          Awaited<ReturnType<typeof getChildSchedules>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetChildSchedules<
  TData = Awaited<ReturnType<typeof getChildSchedules>>,
  TError = unknown,
>(
  params?: GetChildSchedulesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getChildSchedules>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetChildSchedules<
  TData = Awaited<ReturnType<typeof getChildSchedules>>,
  TError = unknown,
>(
  params?: GetChildSchedulesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getChildSchedules>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetChildSchedulesQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const addSchedule = (addScheduleCommand: AddScheduleCommand, signal?: AbortSignal) => {
  return executeFetch<string>({
    url: `/scheduling/v1/schedules`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: addScheduleCommand,
    signal,
  });
};

export const getAddScheduleMutationOptions = <
  TError = UnprocessableEntityResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addSchedule>>,
    TError,
    { data: AddScheduleCommand },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addSchedule>>,
  TError,
  { data: AddScheduleCommand },
  TContext
> => {
  const mutationKey = ["addSchedule"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addSchedule>>,
    { data: AddScheduleCommand }
  > = (props) => {
    const { data } = props ?? {};

    return addSchedule(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddScheduleMutationResult = NonNullable<Awaited<ReturnType<typeof addSchedule>>>;
export type AddScheduleMutationBody = AddScheduleCommand;
export type AddScheduleMutationError = UnprocessableEntityResponse;

export const useAddSchedule = <TError = UnprocessableEntityResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof addSchedule>>,
      TError,
      { data: AddScheduleCommand },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof addSchedule>>,
  TError,
  { data: AddScheduleCommand },
  TContext
> => {
  const mutationOptions = getAddScheduleMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getSchedulesByDate = (params?: GetSchedulesByDateParams, signal?: AbortSignal) => {
  return executeFetch<ScheduleByDateVM[]>({
    url: `/scheduling/v1/schedules/daterange`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetSchedulesByDateQueryKey = (params?: GetSchedulesByDateParams) => {
  return [`/scheduling/v1/schedules/daterange`, ...(params ? [params] : [])] as const;
};

export const getGetSchedulesByDateQueryOptions = <
  TData = Awaited<ReturnType<typeof getSchedulesByDate>>,
  TError = unknown,
>(
  params?: GetSchedulesByDateParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSchedulesByDate>>, TError, TData>>;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetSchedulesByDateQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getSchedulesByDate>>> = ({ signal }) =>
    getSchedulesByDate(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getSchedulesByDate>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetSchedulesByDateQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSchedulesByDate>>
>;
export type GetSchedulesByDateQueryError = unknown;

export function useGetSchedulesByDate<
  TData = Awaited<ReturnType<typeof getSchedulesByDate>>,
  TError = unknown,
>(
  params: undefined | GetSchedulesByDateParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSchedulesByDate>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSchedulesByDate>>,
          TError,
          Awaited<ReturnType<typeof getSchedulesByDate>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetSchedulesByDate<
  TData = Awaited<ReturnType<typeof getSchedulesByDate>>,
  TError = unknown,
>(
  params?: GetSchedulesByDateParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getSchedulesByDate>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSchedulesByDate>>,
          TError,
          Awaited<ReturnType<typeof getSchedulesByDate>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetSchedulesByDate<
  TData = Awaited<ReturnType<typeof getSchedulesByDate>>,
  TError = unknown,
>(
  params?: GetSchedulesByDateParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSchedulesByDate>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetSchedulesByDate<
  TData = Awaited<ReturnType<typeof getSchedulesByDate>>,
  TError = unknown,
>(
  params?: GetSchedulesByDateParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSchedulesByDate>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetSchedulesByDateQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
