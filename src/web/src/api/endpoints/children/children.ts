/**
 * Generated by orval v6.10.3 🍺
 * Do not edit manually.
 * KDVManager CRM API
 * OpenAPI spec version: v1
 */
import { useQuery, useMutation } from "react-query";
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from "react-query";
import type {
  ChildListVM,
  GetAllChildrenParams,
  CreateChildCommand,
} from "../../models";
import { useExecuteAxiosPaginated } from "../../mutator/useExecuteAxiosPaginated";
import { useExecuteAxios } from "../../mutator/useExecuteAxios";

export const useGetAllChildrenHook = () => {
  const getAllChildren = useExecuteAxiosPaginated<ChildListVM[]>();

  return (params?: GetAllChildrenParams) => {
    return getAllChildren({ url: `/crm/v1/children`, method: "get", params });
  };
};

export const getGetAllChildrenQueryKey = (params?: GetAllChildrenParams) => [
  `/crm/v1/children`,
  ...(params ? [params] : []),
];

export type GetAllChildrenQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useGetAllChildrenHook>>>
>;
export type GetAllChildrenQueryError = unknown;

export const useGetAllChildren = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetAllChildrenHook>>>,
  TError = unknown
>(
  params?: GetAllChildrenParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetAllChildrenHook>>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllChildrenQueryKey(params);

  const getAllChildren = useGetAllChildrenHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useGetAllChildrenHook>>>
  > = () => getAllChildren(params);

  const query = useQuery<
    Awaited<ReturnType<ReturnType<typeof useGetAllChildrenHook>>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const useCreateChildHook = () => {
  const createChild = useExecuteAxios<string>();

  return (createChildCommand: CreateChildCommand) => {
    return createChild({
      url: `/crm/v1/children`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: createChildCommand,
    });
  };
};

export type CreateChildMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useCreateChildHook>>>
>;
export type CreateChildMutationBody = CreateChildCommand;
export type CreateChildMutationError = unknown;

export const useCreateChild = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useCreateChildHook>>>,
    TError,
    { data: CreateChildCommand },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const createChild = useCreateChildHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useCreateChildHook>>>,
    { data: CreateChildCommand }
  > = (props) => {
    const { data } = props ?? {};

    return createChild(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof createChild>>,
    TError,
    { data: CreateChildCommand },
    TContext
  >(mutationFn, mutationOptions);
};
export const useDeleteChildHook = () => {
  const deleteChild = useExecuteAxios<string>();

  return (id: string) => {
    return deleteChild({ url: `/crm/v1/children/${id}`, method: "delete" });
  };
};

export type DeleteChildMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useDeleteChildHook>>>
>;

export type DeleteChildMutationError = unknown;

export const useDeleteChild = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useDeleteChildHook>>>,
    TError,
    { id: string },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const deleteChild = useDeleteChildHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useDeleteChildHook>>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteChild(id);
  };

  return useMutation<
    Awaited<ReturnType<typeof deleteChild>>,
    TError,
    { id: string },
    TContext
  >(mutationFn, mutationOptions);
};
