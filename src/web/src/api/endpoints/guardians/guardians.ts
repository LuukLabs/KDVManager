/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * KDVManager CRM API
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { AddGuardianCommand } from "../../models/addGuardianCommand";

import type { ChildGuardianVM } from "../../models/childGuardianVM";

import type { GuardianChildVM } from "../../models/guardianChildVM";

import type { GuardianDetailVM } from "../../models/guardianDetailVM";

import type { GuardianListVM } from "../../models/guardianListVM";

import type { LinkGuardianToChildRequest } from "../../models/linkGuardianToChildRequest";

import type { ListGuardiansParams } from "../../models/listGuardiansParams";

import type { UpdateGuardianCommand } from "../../models/updateGuardianCommand";

import { executeFetchPaginated } from "../../mutator/executeFetchPaginated";
import { executeFetch } from "../../mutator/executeFetch";

export const listGuardians = (params: ListGuardiansParams, signal?: AbortSignal) => {
  return executeFetchPaginated<GuardianListVM[]>({
    url: `/crm/v1/guardians`,
    method: "GET",
    params,
    signal,
  });
};

export const getListGuardiansQueryKey = (params: ListGuardiansParams) => {
  return [`/crm/v1/guardians`, ...(params ? [params] : [])] as const;
};

export const getListGuardiansQueryOptions = <
  TData = Awaited<ReturnType<typeof listGuardians>>,
  TError = unknown,
>(
  params: ListGuardiansParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listGuardians>>, TError, TData>>;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListGuardiansQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listGuardians>>> = ({ signal }) =>
    listGuardians(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listGuardians>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListGuardiansQueryResult = NonNullable<Awaited<ReturnType<typeof listGuardians>>>;
export type ListGuardiansQueryError = unknown;

export function useListGuardians<
  TData = Awaited<ReturnType<typeof listGuardians>>,
  TError = unknown,
>(
  params: ListGuardiansParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof listGuardians>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listGuardians>>,
          TError,
          Awaited<ReturnType<typeof listGuardians>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useListGuardians<
  TData = Awaited<ReturnType<typeof listGuardians>>,
  TError = unknown,
>(
  params: ListGuardiansParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listGuardians>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listGuardians>>,
          TError,
          Awaited<ReturnType<typeof listGuardians>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useListGuardians<
  TData = Awaited<ReturnType<typeof listGuardians>>,
  TError = unknown,
>(
  params: ListGuardiansParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listGuardians>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useListGuardians<
  TData = Awaited<ReturnType<typeof listGuardians>>,
  TError = unknown,
>(
  params: ListGuardiansParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listGuardians>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getListGuardiansQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const addGuardian = (addGuardianCommand: AddGuardianCommand, signal?: AbortSignal) => {
  return executeFetch<string>({
    url: `/crm/v1/guardians`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: addGuardianCommand,
    signal,
  });
};

export const getAddGuardianMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addGuardian>>,
    TError,
    { data: AddGuardianCommand },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addGuardian>>,
  TError,
  { data: AddGuardianCommand },
  TContext
> => {
  const mutationKey = ["addGuardian"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addGuardian>>,
    { data: AddGuardianCommand }
  > = (props) => {
    const { data } = props ?? {};

    return addGuardian(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddGuardianMutationResult = NonNullable<Awaited<ReturnType<typeof addGuardian>>>;
export type AddGuardianMutationBody = AddGuardianCommand;
export type AddGuardianMutationError = unknown;

export const useAddGuardian = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof addGuardian>>,
      TError,
      { data: AddGuardianCommand },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof addGuardian>>,
  TError,
  { data: AddGuardianCommand },
  TContext
> => {
  const mutationOptions = getAddGuardianMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getGuardianById = (id: string, signal?: AbortSignal) => {
  return executeFetch<GuardianDetailVM>({ url: `/crm/v1/guardians/${id}`, method: "GET", signal });
};

export const getGetGuardianByIdQueryKey = (id: string) => {
  return [`/crm/v1/guardians/${id}`] as const;
};

export const getGetGuardianByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getGuardianById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getGuardianById>>, TError, TData>>;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetGuardianByIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getGuardianById>>> = ({ signal }) =>
    getGuardianById(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getGuardianById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetGuardianByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getGuardianById>>>;
export type GetGuardianByIdQueryError = unknown;

export function useGetGuardianById<
  TData = Awaited<ReturnType<typeof getGuardianById>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getGuardianById>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGuardianById>>,
          TError,
          Awaited<ReturnType<typeof getGuardianById>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetGuardianById<
  TData = Awaited<ReturnType<typeof getGuardianById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getGuardianById>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGuardianById>>,
          TError,
          Awaited<ReturnType<typeof getGuardianById>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetGuardianById<
  TData = Awaited<ReturnType<typeof getGuardianById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getGuardianById>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetGuardianById<
  TData = Awaited<ReturnType<typeof getGuardianById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getGuardianById>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetGuardianByIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const updateGuardian = (id: string, updateGuardianCommand: UpdateGuardianCommand) => {
  return executeFetch<void>({
    url: `/crm/v1/guardians/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: updateGuardianCommand,
  });
};

export const getUpdateGuardianMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateGuardian>>,
    TError,
    { id: string; data: UpdateGuardianCommand },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateGuardian>>,
  TError,
  { id: string; data: UpdateGuardianCommand },
  TContext
> => {
  const mutationKey = ["updateGuardian"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateGuardian>>,
    { id: string; data: UpdateGuardianCommand }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateGuardian(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateGuardianMutationResult = NonNullable<Awaited<ReturnType<typeof updateGuardian>>>;
export type UpdateGuardianMutationBody = UpdateGuardianCommand;
export type UpdateGuardianMutationError = unknown;

export const useUpdateGuardian = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateGuardian>>,
      TError,
      { id: string; data: UpdateGuardianCommand },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateGuardian>>,
  TError,
  { id: string; data: UpdateGuardianCommand },
  TContext
> => {
  const mutationOptions = getUpdateGuardianMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const deleteGuardian = (id: string) => {
  return executeFetch<void>({ url: `/crm/v1/guardians/${id}`, method: "DELETE" });
};

export const getDeleteGuardianMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteGuardian>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteGuardian>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["deleteGuardian"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteGuardian>>, { id: string }> = (
    props,
  ) => {
    const { id } = props ?? {};

    return deleteGuardian(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteGuardianMutationResult = NonNullable<Awaited<ReturnType<typeof deleteGuardian>>>;

export type DeleteGuardianMutationError = unknown;

export const useDeleteGuardian = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteGuardian>>,
      TError,
      { id: string },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteGuardian>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteGuardianMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getGuardianChildren = (guardianId: string, signal?: AbortSignal) => {
  return executeFetch<GuardianChildVM[]>({
    url: `/crm/v1/guardians/${guardianId}/children`,
    method: "GET",
    signal,
  });
};

export const getGetGuardianChildrenQueryKey = (guardianId: string) => {
  return [`/crm/v1/guardians/${guardianId}/children`] as const;
};

export const getGetGuardianChildrenQueryOptions = <
  TData = Awaited<ReturnType<typeof getGuardianChildren>>,
  TError = unknown,
>(
  guardianId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getGuardianChildren>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetGuardianChildrenQueryKey(guardianId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getGuardianChildren>>> = ({ signal }) =>
    getGuardianChildren(guardianId, signal);

  return { queryKey, queryFn, enabled: !!guardianId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getGuardianChildren>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetGuardianChildrenQueryResult = NonNullable<
  Awaited<ReturnType<typeof getGuardianChildren>>
>;
export type GetGuardianChildrenQueryError = unknown;

export function useGetGuardianChildren<
  TData = Awaited<ReturnType<typeof getGuardianChildren>>,
  TError = unknown,
>(
  guardianId: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getGuardianChildren>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGuardianChildren>>,
          TError,
          Awaited<ReturnType<typeof getGuardianChildren>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetGuardianChildren<
  TData = Awaited<ReturnType<typeof getGuardianChildren>>,
  TError = unknown,
>(
  guardianId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getGuardianChildren>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGuardianChildren>>,
          TError,
          Awaited<ReturnType<typeof getGuardianChildren>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetGuardianChildren<
  TData = Awaited<ReturnType<typeof getGuardianChildren>>,
  TError = unknown,
>(
  guardianId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getGuardianChildren>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetGuardianChildren<
  TData = Awaited<ReturnType<typeof getGuardianChildren>>,
  TError = unknown,
>(
  guardianId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getGuardianChildren>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetGuardianChildrenQueryOptions(guardianId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getChildGuardians = (childId: string, signal?: AbortSignal) => {
  return executeFetch<ChildGuardianVM[]>({
    url: `/crm/v1/children/${childId}/guardians`,
    method: "GET",
    signal,
  });
};

export const getGetChildGuardiansQueryKey = (childId: string) => {
  return [`/crm/v1/children/${childId}/guardians`] as const;
};

export const getGetChildGuardiansQueryOptions = <
  TData = Awaited<ReturnType<typeof getChildGuardians>>,
  TError = unknown,
>(
  childId: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getChildGuardians>>, TError, TData>>;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetChildGuardiansQueryKey(childId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getChildGuardians>>> = ({ signal }) =>
    getChildGuardians(childId, signal);

  return { queryKey, queryFn, enabled: !!childId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getChildGuardians>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetChildGuardiansQueryResult = NonNullable<
  Awaited<ReturnType<typeof getChildGuardians>>
>;
export type GetChildGuardiansQueryError = unknown;

export function useGetChildGuardians<
  TData = Awaited<ReturnType<typeof getChildGuardians>>,
  TError = unknown,
>(
  childId: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getChildGuardians>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getChildGuardians>>,
          TError,
          Awaited<ReturnType<typeof getChildGuardians>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetChildGuardians<
  TData = Awaited<ReturnType<typeof getChildGuardians>>,
  TError = unknown,
>(
  childId: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getChildGuardians>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getChildGuardians>>,
          TError,
          Awaited<ReturnType<typeof getChildGuardians>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetChildGuardians<
  TData = Awaited<ReturnType<typeof getChildGuardians>>,
  TError = unknown,
>(
  childId: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getChildGuardians>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetChildGuardians<
  TData = Awaited<ReturnType<typeof getChildGuardians>>,
  TError = unknown,
>(
  childId: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getChildGuardians>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetChildGuardiansQueryOptions(childId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const linkGuardianToChild = (
  childId: string,
  guardianId: string,
  linkGuardianToChildRequest: LinkGuardianToChildRequest,
  signal?: AbortSignal,
) => {
  return executeFetch<void>({
    url: `/crm/v1/children/${childId}/guardians/${guardianId}`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: linkGuardianToChildRequest,
    signal,
  });
};

export const getLinkGuardianToChildMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof linkGuardianToChild>>,
    TError,
    { childId: string; guardianId: string; data: LinkGuardianToChildRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof linkGuardianToChild>>,
  TError,
  { childId: string; guardianId: string; data: LinkGuardianToChildRequest },
  TContext
> => {
  const mutationKey = ["linkGuardianToChild"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof linkGuardianToChild>>,
    { childId: string; guardianId: string; data: LinkGuardianToChildRequest }
  > = (props) => {
    const { childId, guardianId, data } = props ?? {};

    return linkGuardianToChild(childId, guardianId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type LinkGuardianToChildMutationResult = NonNullable<
  Awaited<ReturnType<typeof linkGuardianToChild>>
>;
export type LinkGuardianToChildMutationBody = LinkGuardianToChildRequest;
export type LinkGuardianToChildMutationError = unknown;

export const useLinkGuardianToChild = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof linkGuardianToChild>>,
      TError,
      { childId: string; guardianId: string; data: LinkGuardianToChildRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof linkGuardianToChild>>,
  TError,
  { childId: string; guardianId: string; data: LinkGuardianToChildRequest },
  TContext
> => {
  const mutationOptions = getLinkGuardianToChildMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const unlinkGuardianFromChild = (childId: string, guardianId: string) => {
  return executeFetch<void>({
    url: `/crm/v1/children/${childId}/guardians/${guardianId}`,
    method: "DELETE",
  });
};

export const getUnlinkGuardianFromChildMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof unlinkGuardianFromChild>>,
    TError,
    { childId: string; guardianId: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof unlinkGuardianFromChild>>,
  TError,
  { childId: string; guardianId: string },
  TContext
> => {
  const mutationKey = ["unlinkGuardianFromChild"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof unlinkGuardianFromChild>>,
    { childId: string; guardianId: string }
  > = (props) => {
    const { childId, guardianId } = props ?? {};

    return unlinkGuardianFromChild(childId, guardianId);
  };

  return { mutationFn, ...mutationOptions };
};

export type UnlinkGuardianFromChildMutationResult = NonNullable<
  Awaited<ReturnType<typeof unlinkGuardianFromChild>>
>;

export type UnlinkGuardianFromChildMutationError = unknown;

export const useUnlinkGuardianFromChild = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof unlinkGuardianFromChild>>,
      TError,
      { childId: string; guardianId: string },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof unlinkGuardianFromChild>>,
  TError,
  { childId: string; guardianId: string },
  TContext
> => {
  const mutationOptions = getUnlinkGuardianFromChildMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
