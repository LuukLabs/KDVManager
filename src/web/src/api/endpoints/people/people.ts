/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * KDVManager CRM API
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { useCallback } from "react";
import type { AddPersonCommand } from "../../models/addPersonCommand";
import type { GetAllPeopleParams } from "../../models/getAllPeopleParams";
import type { PersonListVM } from "../../models/personListVM";
import { useExecuteFetchPaginated } from "../../mutator/useExecuteFetchPaginated";
import { useExecuteFetch } from "../../mutator/useExecuteFetch";

export const useGetAllPeopleHook = () => {
  const getAllPeople = useExecuteFetchPaginated<PersonListVM[]>();

  return useCallback(
    (params?: GetAllPeopleParams, signal?: AbortSignal) => {
      return getAllPeople({ url: `/crm/v1/people`, method: "GET", params, signal });
    },
    [getAllPeople],
  );
};

export const getGetAllPeopleQueryKey = (params?: GetAllPeopleParams) => {
  return [`/crm/v1/people`, ...(params ? [params] : [])] as const;
};

export const useGetAllPeopleQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetAllPeopleHook>>>,
  TError = unknown,
>(
  params?: GetAllPeopleParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetAllPeopleHook>>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllPeopleQueryKey(params);

  const getAllPeople = useGetAllPeopleHook();

  const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetAllPeopleHook>>>> = ({
    signal,
  }) => getAllPeople(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetAllPeopleHook>>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAllPeopleQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useGetAllPeopleHook>>>
>;
export type GetAllPeopleQueryError = unknown;

export function useGetAllPeople<
  TData = Awaited<ReturnType<ReturnType<typeof useGetAllPeopleHook>>>,
  TError = unknown,
>(
  params: undefined | GetAllPeopleParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetAllPeopleHook>>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetAllPeopleHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useGetAllPeopleHook>>>
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAllPeople<
  TData = Awaited<ReturnType<ReturnType<typeof useGetAllPeopleHook>>>,
  TError = unknown,
>(
  params?: GetAllPeopleParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetAllPeopleHook>>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetAllPeopleHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useGetAllPeopleHook>>>
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAllPeople<
  TData = Awaited<ReturnType<ReturnType<typeof useGetAllPeopleHook>>>,
  TError = unknown,
>(
  params?: GetAllPeopleParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetAllPeopleHook>>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetAllPeople<
  TData = Awaited<ReturnType<ReturnType<typeof useGetAllPeopleHook>>>,
  TError = unknown,
>(
  params?: GetAllPeopleParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetAllPeopleHook>>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = useGetAllPeopleQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const useAddPersonHook = () => {
  const addPerson = useExecuteFetch<string>();

  return useCallback(
    (addPersonCommand: AddPersonCommand, signal?: AbortSignal) => {
      return addPerson({
        url: `/crm/v1/people`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: addPersonCommand,
        signal,
      });
    },
    [addPerson],
  );
};

export const useAddPersonMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useAddPersonHook>>>,
    TError,
    { data: AddPersonCommand },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useAddPersonHook>>>,
  TError,
  { data: AddPersonCommand },
  TContext
> => {
  const mutationKey = ["addPerson"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const addPerson = useAddPersonHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useAddPersonHook>>>,
    { data: AddPersonCommand }
  > = (props) => {
    const { data } = props ?? {};

    return addPerson(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddPersonMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useAddPersonHook>>>
>;
export type AddPersonMutationBody = AddPersonCommand;
export type AddPersonMutationError = unknown;

export const useAddPerson = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useAddPersonHook>>>,
    TError,
    { data: AddPersonCommand },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<ReturnType<typeof useAddPersonHook>>>,
  TError,
  { data: AddPersonCommand },
  TContext
> => {
  const mutationOptions = useAddPersonMutationOptions(options);

  return useMutation(mutationOptions);
};
